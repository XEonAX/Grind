//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Grind.Common {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("GrindDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class GrindDataSet : global::System.Data.DataSet {
        
        private PeopleDataTable tablePeople;
        
        private TasksDataTable tableTasks;
        
        private global::System.Data.DataRelation relationFK_Tasks_0_0;
        
        private global::System.Data.DataRelation relationFK_Tasks_0_1;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public GrindDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected GrindDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["People"] != null)) {
                    base.Tables.Add(new PeopleDataTable(ds.Tables["People"]));
                }
                if ((ds.Tables["Tasks"] != null)) {
                    base.Tables.Add(new TasksDataTable(ds.Tables["Tasks"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PeopleDataTable People {
            get {
                return this.tablePeople;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TasksDataTable Tasks {
            get {
                return this.tableTasks;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public override global::System.Data.DataSet Clone() {
            GrindDataSet cln = ((GrindDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["People"] != null)) {
                    base.Tables.Add(new PeopleDataTable(ds.Tables["People"]));
                }
                if ((ds.Tables["Tasks"] != null)) {
                    base.Tables.Add(new TasksDataTable(ds.Tables["Tasks"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars(bool initTable) {
            this.tablePeople = ((PeopleDataTable)(base.Tables["People"]));
            if ((initTable == true)) {
                if ((this.tablePeople != null)) {
                    this.tablePeople.InitVars();
                }
            }
            this.tableTasks = ((TasksDataTable)(base.Tables["Tasks"]));
            if ((initTable == true)) {
                if ((this.tableTasks != null)) {
                    this.tableTasks.InitVars();
                }
            }
            this.relationFK_Tasks_0_0 = this.Relations["FK_Tasks_0_0"];
            this.relationFK_Tasks_0_1 = this.Relations["FK_Tasks_0_1"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitClass() {
            this.DataSetName = "GrindDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/GrindDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tablePeople = new PeopleDataTable();
            base.Tables.Add(this.tablePeople);
            this.tableTasks = new TasksDataTable();
            base.Tables.Add(this.tableTasks);
            this.relationFK_Tasks_0_0 = new global::System.Data.DataRelation("FK_Tasks_0_0", new global::System.Data.DataColumn[] {
                        this.tablePeople.idColumn}, new global::System.Data.DataColumn[] {
                        this.tableTasks.developer_idColumn}, false);
            this.Relations.Add(this.relationFK_Tasks_0_0);
            this.relationFK_Tasks_0_1 = new global::System.Data.DataRelation("FK_Tasks_0_1", new global::System.Data.DataColumn[] {
                        this.tablePeople.idColumn}, new global::System.Data.DataColumn[] {
                        this.tableTasks.reviewer_idColumn}, false);
            this.Relations.Add(this.relationFK_Tasks_0_1);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializePeople() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeTasks() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            GrindDataSet ds = new GrindDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void PeopleRowChangeEventHandler(object sender, PeopleRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void TasksRowChangeEventHandler(object sender, TasksRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PeopleDataTable : global::System.Data.TypedTableBase<PeopleRow> {
            
            private global::System.Data.DataColumn columnid;
            
            private global::System.Data.DataColumn columnname;
            
            private global::System.Data.DataColumn columntrigram;
            
            private global::System.Data.DataColumn columnactive;
            
            private global::System.Data.DataColumn columnlevel;
            
            private global::System.Data.DataColumn columninternal_object_id;
            
            private global::System.Data.DataColumn columnunread_objects_count;
            
            private global::System.Data.DataColumn columndocuments_count;
            
            private global::System.Data.DataColumn columntasks_count;
            
            private global::System.Data.DataColumn columncreated_at;
            
            private global::System.Data.DataColumn columnupdated_at;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PeopleDataTable() {
                this.TableName = "People";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal PeopleDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected PeopleDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn trigramColumn {
                get {
                    return this.columntrigram;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn activeColumn {
                get {
                    return this.columnactive;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn levelColumn {
                get {
                    return this.columnlevel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn internal_object_idColumn {
                get {
                    return this.columninternal_object_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn unread_objects_countColumn {
                get {
                    return this.columnunread_objects_count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn documents_countColumn {
                get {
                    return this.columndocuments_count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn tasks_countColumn {
                get {
                    return this.columntasks_count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn created_atColumn {
                get {
                    return this.columncreated_at;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn updated_atColumn {
                get {
                    return this.columnupdated_at;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PeopleRow this[int index] {
                get {
                    return ((PeopleRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event PeopleRowChangeEventHandler PeopleRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event PeopleRowChangeEventHandler PeopleRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event PeopleRowChangeEventHandler PeopleRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event PeopleRowChangeEventHandler PeopleRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddPeopleRow(PeopleRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PeopleRow AddPeopleRow(long id, string name, string trigram, bool active, long level, string internal_object_id, long unread_objects_count, long documents_count, long tasks_count, System.DateTime created_at, System.DateTime updated_at) {
                PeopleRow rowPeopleRow = ((PeopleRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        id,
                        name,
                        trigram,
                        active,
                        level,
                        internal_object_id,
                        unread_objects_count,
                        documents_count,
                        tasks_count,
                        created_at,
                        updated_at};
                rowPeopleRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPeopleRow);
                return rowPeopleRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PeopleRow FindByid(long id) {
                return ((PeopleRow)(this.Rows.Find(new object[] {
                            id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                PeopleDataTable cln = ((PeopleDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PeopleDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnname = base.Columns["name"];
                this.columntrigram = base.Columns["trigram"];
                this.columnactive = base.Columns["active"];
                this.columnlevel = base.Columns["level"];
                this.columninternal_object_id = base.Columns["internal_object_id"];
                this.columnunread_objects_count = base.Columns["unread_objects_count"];
                this.columndocuments_count = base.Columns["documents_count"];
                this.columntasks_count = base.Columns["tasks_count"];
                this.columncreated_at = base.Columns["created_at"];
                this.columnupdated_at = base.Columns["updated_at"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnid = new global::System.Data.DataColumn("id", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnid);
                this.columnname = new global::System.Data.DataColumn("name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnname);
                this.columntrigram = new global::System.Data.DataColumn("trigram", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntrigram);
                this.columnactive = new global::System.Data.DataColumn("active", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnactive);
                this.columnlevel = new global::System.Data.DataColumn("level", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlevel);
                this.columninternal_object_id = new global::System.Data.DataColumn("internal_object_id", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninternal_object_id);
                this.columnunread_objects_count = new global::System.Data.DataColumn("unread_objects_count", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnunread_objects_count);
                this.columndocuments_count = new global::System.Data.DataColumn("documents_count", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndocuments_count);
                this.columntasks_count = new global::System.Data.DataColumn("tasks_count", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntasks_count);
                this.columncreated_at = new global::System.Data.DataColumn("created_at", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncreated_at);
                this.columnupdated_at = new global::System.Data.DataColumn("updated_at", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnupdated_at);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnid}, true));
                this.columnid.AllowDBNull = false;
                this.columnid.Unique = true;
                this.columnname.AllowDBNull = false;
                this.columnname.MaxLength = 2147483647;
                this.columntrigram.AllowDBNull = false;
                this.columntrigram.MaxLength = 2147483647;
                this.columnactive.AllowDBNull = false;
                this.columnlevel.AllowDBNull = false;
                this.columninternal_object_id.AllowDBNull = false;
                this.columninternal_object_id.MaxLength = 2147483647;
                this.columnunread_objects_count.AllowDBNull = false;
                this.columndocuments_count.AllowDBNull = false;
                this.columntasks_count.AllowDBNull = false;
                this.columncreated_at.AllowDBNull = false;
                this.columnupdated_at.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PeopleRow NewPeopleRow() {
                return ((PeopleRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PeopleRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(PeopleRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PeopleRowChanged != null)) {
                    this.PeopleRowChanged(this, new PeopleRowChangeEvent(((PeopleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PeopleRowChanging != null)) {
                    this.PeopleRowChanging(this, new PeopleRowChangeEvent(((PeopleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PeopleRowDeleted != null)) {
                    this.PeopleRowDeleted(this, new PeopleRowChangeEvent(((PeopleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PeopleRowDeleting != null)) {
                    this.PeopleRowDeleting(this, new PeopleRowChangeEvent(((PeopleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemovePeopleRow(PeopleRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                GrindDataSet ds = new GrindDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PeopleDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TasksDataTable : global::System.Data.TypedTableBase<TasksRow> {
            
            private global::System.Data.DataColumn columnid;
            
            private global::System.Data.DataColumn columnname;
            
            private global::System.Data.DataColumn columntask_status;
            
            private global::System.Data.DataColumn columnbug_type;
            
            private global::System.Data.DataColumn columntitle;
            
            private global::System.Data.DataColumn columnis_bug;
            
            private global::System.Data.DataColumn columninternal_object_id;
            
            private global::System.Data.DataColumn columnapproved;
            
            private global::System.Data.DataColumn columndescription;
            
            private global::System.Data.DataColumn columnanalysis;
            
            private global::System.Data.DataColumn columnreview;
            
            private global::System.Data.DataColumn columndeveloper_id;
            
            private global::System.Data.DataColumn columnreviewer_id;
            
            private global::System.Data.DataColumn columncomments_count;
            
            private global::System.Data.DataColumn columndocuments_count;
            
            private global::System.Data.DataColumn columnopen_date;
            
            private global::System.Data.DataColumn columnanalysis_date;
            
            private global::System.Data.DataColumn columnreview_date;
            
            private global::System.Data.DataColumn columncorrection_date;
            
            private global::System.Data.DataColumn columnpromotion_date;
            
            private global::System.Data.DataColumn columncollection_date;
            
            private global::System.Data.DataColumn columnclosed_date;
            
            private global::System.Data.DataColumn columntarget_date;
            
            private global::System.Data.DataColumn columncreated_at;
            
            private global::System.Data.DataColumn columnupdated_at;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public TasksDataTable() {
                this.TableName = "Tasks";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal TasksDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected TasksDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn task_statusColumn {
                get {
                    return this.columntask_status;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn bug_typeColumn {
                get {
                    return this.columnbug_type;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn titleColumn {
                get {
                    return this.columntitle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn is_bugColumn {
                get {
                    return this.columnis_bug;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn internal_object_idColumn {
                get {
                    return this.columninternal_object_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn approvedColumn {
                get {
                    return this.columnapproved;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn descriptionColumn {
                get {
                    return this.columndescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn analysisColumn {
                get {
                    return this.columnanalysis;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn reviewColumn {
                get {
                    return this.columnreview;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn developer_idColumn {
                get {
                    return this.columndeveloper_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn reviewer_idColumn {
                get {
                    return this.columnreviewer_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn comments_countColumn {
                get {
                    return this.columncomments_count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn documents_countColumn {
                get {
                    return this.columndocuments_count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn open_dateColumn {
                get {
                    return this.columnopen_date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn analysis_dateColumn {
                get {
                    return this.columnanalysis_date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn review_dateColumn {
                get {
                    return this.columnreview_date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn correction_dateColumn {
                get {
                    return this.columncorrection_date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn promotion_dateColumn {
                get {
                    return this.columnpromotion_date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn collection_dateColumn {
                get {
                    return this.columncollection_date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn closed_dateColumn {
                get {
                    return this.columnclosed_date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn target_dateColumn {
                get {
                    return this.columntarget_date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn created_atColumn {
                get {
                    return this.columncreated_at;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn updated_atColumn {
                get {
                    return this.columnupdated_at;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public TasksRow this[int index] {
                get {
                    return ((TasksRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event TasksRowChangeEventHandler TasksRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event TasksRowChangeEventHandler TasksRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event TasksRowChangeEventHandler TasksRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event TasksRowChangeEventHandler TasksRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddTasksRow(TasksRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public TasksRow AddTasksRow(
                        long id, 
                        string name, 
                        long task_status, 
                        long bug_type, 
                        string title, 
                        bool is_bug, 
                        string internal_object_id, 
                        bool approved, 
                        byte[] description, 
                        byte[] analysis, 
                        byte[] review, 
                        PeopleRow parentPeopleRowByFK_Tasks_0_0, 
                        PeopleRow parentPeopleRowByFK_Tasks_0_1, 
                        long comments_count, 
                        long documents_count, 
                        System.DateTime open_date, 
                        System.DateTime analysis_date, 
                        System.DateTime review_date, 
                        System.DateTime correction_date, 
                        System.DateTime promotion_date, 
                        System.DateTime collection_date, 
                        System.DateTime closed_date, 
                        System.DateTime target_date, 
                        System.DateTime created_at, 
                        System.DateTime updated_at) {
                TasksRow rowTasksRow = ((TasksRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        id,
                        name,
                        task_status,
                        bug_type,
                        title,
                        is_bug,
                        internal_object_id,
                        approved,
                        description,
                        analysis,
                        review,
                        null,
                        null,
                        comments_count,
                        documents_count,
                        open_date,
                        analysis_date,
                        review_date,
                        correction_date,
                        promotion_date,
                        collection_date,
                        closed_date,
                        target_date,
                        created_at,
                        updated_at};
                if ((parentPeopleRowByFK_Tasks_0_0 != null)) {
                    columnValuesArray[11] = parentPeopleRowByFK_Tasks_0_0[0];
                }
                if ((parentPeopleRowByFK_Tasks_0_1 != null)) {
                    columnValuesArray[12] = parentPeopleRowByFK_Tasks_0_1[0];
                }
                rowTasksRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTasksRow);
                return rowTasksRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public TasksRow FindByid(long id) {
                return ((TasksRow)(this.Rows.Find(new object[] {
                            id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                TasksDataTable cln = ((TasksDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TasksDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnname = base.Columns["name"];
                this.columntask_status = base.Columns["task_status"];
                this.columnbug_type = base.Columns["bug_type"];
                this.columntitle = base.Columns["title"];
                this.columnis_bug = base.Columns["is_bug"];
                this.columninternal_object_id = base.Columns["internal_object_id"];
                this.columnapproved = base.Columns["approved"];
                this.columndescription = base.Columns["description"];
                this.columnanalysis = base.Columns["analysis"];
                this.columnreview = base.Columns["review"];
                this.columndeveloper_id = base.Columns["developer_id"];
                this.columnreviewer_id = base.Columns["reviewer_id"];
                this.columncomments_count = base.Columns["comments_count"];
                this.columndocuments_count = base.Columns["documents_count"];
                this.columnopen_date = base.Columns["open_date"];
                this.columnanalysis_date = base.Columns["analysis_date"];
                this.columnreview_date = base.Columns["review_date"];
                this.columncorrection_date = base.Columns["correction_date"];
                this.columnpromotion_date = base.Columns["promotion_date"];
                this.columncollection_date = base.Columns["collection_date"];
                this.columnclosed_date = base.Columns["closed_date"];
                this.columntarget_date = base.Columns["target_date"];
                this.columncreated_at = base.Columns["created_at"];
                this.columnupdated_at = base.Columns["updated_at"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnid = new global::System.Data.DataColumn("id", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnid);
                this.columnname = new global::System.Data.DataColumn("name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnname);
                this.columntask_status = new global::System.Data.DataColumn("task_status", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntask_status);
                this.columnbug_type = new global::System.Data.DataColumn("bug_type", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbug_type);
                this.columntitle = new global::System.Data.DataColumn("title", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntitle);
                this.columnis_bug = new global::System.Data.DataColumn("is_bug", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnis_bug);
                this.columninternal_object_id = new global::System.Data.DataColumn("internal_object_id", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninternal_object_id);
                this.columnapproved = new global::System.Data.DataColumn("approved", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnapproved);
                this.columndescription = new global::System.Data.DataColumn("description", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndescription);
                this.columnanalysis = new global::System.Data.DataColumn("analysis", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnanalysis);
                this.columnreview = new global::System.Data.DataColumn("review", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnreview);
                this.columndeveloper_id = new global::System.Data.DataColumn("developer_id", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndeveloper_id);
                this.columnreviewer_id = new global::System.Data.DataColumn("reviewer_id", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnreviewer_id);
                this.columncomments_count = new global::System.Data.DataColumn("comments_count", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncomments_count);
                this.columndocuments_count = new global::System.Data.DataColumn("documents_count", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndocuments_count);
                this.columnopen_date = new global::System.Data.DataColumn("open_date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnopen_date);
                this.columnanalysis_date = new global::System.Data.DataColumn("analysis_date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnanalysis_date);
                this.columnreview_date = new global::System.Data.DataColumn("review_date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnreview_date);
                this.columncorrection_date = new global::System.Data.DataColumn("correction_date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncorrection_date);
                this.columnpromotion_date = new global::System.Data.DataColumn("promotion_date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpromotion_date);
                this.columncollection_date = new global::System.Data.DataColumn("collection_date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncollection_date);
                this.columnclosed_date = new global::System.Data.DataColumn("closed_date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnclosed_date);
                this.columntarget_date = new global::System.Data.DataColumn("target_date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntarget_date);
                this.columncreated_at = new global::System.Data.DataColumn("created_at", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncreated_at);
                this.columnupdated_at = new global::System.Data.DataColumn("updated_at", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnupdated_at);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnid}, true));
                this.columnid.AllowDBNull = false;
                this.columnid.Unique = true;
                this.columnname.AllowDBNull = false;
                this.columnname.MaxLength = 2147483647;
                this.columntask_status.AllowDBNull = false;
                this.columnbug_type.AllowDBNull = false;
                this.columntitle.AllowDBNull = false;
                this.columntitle.MaxLength = 2147483647;
                this.columnis_bug.AllowDBNull = false;
                this.columninternal_object_id.AllowDBNull = false;
                this.columninternal_object_id.MaxLength = 2147483647;
                this.columnapproved.AllowDBNull = false;
                this.columndeveloper_id.AllowDBNull = false;
                this.columnreviewer_id.AllowDBNull = false;
                this.columncomments_count.AllowDBNull = false;
                this.columndocuments_count.AllowDBNull = false;
                this.columnopen_date.AllowDBNull = false;
                this.columnanalysis_date.AllowDBNull = false;
                this.columnreview_date.AllowDBNull = false;
                this.columncorrection_date.AllowDBNull = false;
                this.columnpromotion_date.AllowDBNull = false;
                this.columncollection_date.AllowDBNull = false;
                this.columnclosed_date.AllowDBNull = false;
                this.columntarget_date.AllowDBNull = false;
                this.columncreated_at.AllowDBNull = false;
                this.columnupdated_at.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public TasksRow NewTasksRow() {
                return ((TasksRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TasksRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(TasksRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TasksRowChanged != null)) {
                    this.TasksRowChanged(this, new TasksRowChangeEvent(((TasksRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TasksRowChanging != null)) {
                    this.TasksRowChanging(this, new TasksRowChangeEvent(((TasksRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TasksRowDeleted != null)) {
                    this.TasksRowDeleted(this, new TasksRowChangeEvent(((TasksRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TasksRowDeleting != null)) {
                    this.TasksRowDeleting(this, new TasksRowChangeEvent(((TasksRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveTasksRow(TasksRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                GrindDataSet ds = new GrindDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TasksDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class PeopleRow : global::System.Data.DataRow {
            
            private PeopleDataTable tablePeople;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal PeopleRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePeople = ((PeopleDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long id {
                get {
                    return ((long)(this[this.tablePeople.idColumn]));
                }
                set {
                    this[this.tablePeople.idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string name {
                get {
                    return ((string)(this[this.tablePeople.nameColumn]));
                }
                set {
                    this[this.tablePeople.nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string trigram {
                get {
                    return ((string)(this[this.tablePeople.trigramColumn]));
                }
                set {
                    this[this.tablePeople.trigramColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool active {
                get {
                    return ((bool)(this[this.tablePeople.activeColumn]));
                }
                set {
                    this[this.tablePeople.activeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long level {
                get {
                    return ((long)(this[this.tablePeople.levelColumn]));
                }
                set {
                    this[this.tablePeople.levelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string internal_object_id {
                get {
                    return ((string)(this[this.tablePeople.internal_object_idColumn]));
                }
                set {
                    this[this.tablePeople.internal_object_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long unread_objects_count {
                get {
                    return ((long)(this[this.tablePeople.unread_objects_countColumn]));
                }
                set {
                    this[this.tablePeople.unread_objects_countColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long documents_count {
                get {
                    return ((long)(this[this.tablePeople.documents_countColumn]));
                }
                set {
                    this[this.tablePeople.documents_countColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long tasks_count {
                get {
                    return ((long)(this[this.tablePeople.tasks_countColumn]));
                }
                set {
                    this[this.tablePeople.tasks_countColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.DateTime created_at {
                get {
                    return ((global::System.DateTime)(this[this.tablePeople.created_atColumn]));
                }
                set {
                    this[this.tablePeople.created_atColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.DateTime updated_at {
                get {
                    return ((global::System.DateTime)(this[this.tablePeople.updated_atColumn]));
                }
                set {
                    this[this.tablePeople.updated_atColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public TasksRow[] GetTasksRowsByFK_Tasks_0_0() {
                if ((this.Table.ChildRelations["FK_Tasks_0_0"] == null)) {
                    return new TasksRow[0];
                }
                else {
                    return ((TasksRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Tasks_0_0"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public TasksRow[] GetTasksRowsByFK_Tasks_0_1() {
                if ((this.Table.ChildRelations["FK_Tasks_0_1"] == null)) {
                    return new TasksRow[0];
                }
                else {
                    return ((TasksRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Tasks_0_1"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class TasksRow : global::System.Data.DataRow {
            
            private TasksDataTable tableTasks;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal TasksRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTasks = ((TasksDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long id {
                get {
                    return ((long)(this[this.tableTasks.idColumn]));
                }
                set {
                    this[this.tableTasks.idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string name {
                get {
                    return ((string)(this[this.tableTasks.nameColumn]));
                }
                set {
                    this[this.tableTasks.nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long task_status {
                get {
                    return ((long)(this[this.tableTasks.task_statusColumn]));
                }
                set {
                    this[this.tableTasks.task_statusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long bug_type {
                get {
                    return ((long)(this[this.tableTasks.bug_typeColumn]));
                }
                set {
                    this[this.tableTasks.bug_typeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string title {
                get {
                    return ((string)(this[this.tableTasks.titleColumn]));
                }
                set {
                    this[this.tableTasks.titleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool is_bug {
                get {
                    return ((bool)(this[this.tableTasks.is_bugColumn]));
                }
                set {
                    this[this.tableTasks.is_bugColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string internal_object_id {
                get {
                    return ((string)(this[this.tableTasks.internal_object_idColumn]));
                }
                set {
                    this[this.tableTasks.internal_object_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool approved {
                get {
                    return ((bool)(this[this.tableTasks.approvedColumn]));
                }
                set {
                    this[this.tableTasks.approvedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public byte[] description {
                get {
                    try {
                        return ((byte[])(this[this.tableTasks.descriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'description\' in table \'Tasks\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTasks.descriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public byte[] analysis {
                get {
                    try {
                        return ((byte[])(this[this.tableTasks.analysisColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'analysis\' in table \'Tasks\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTasks.analysisColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public byte[] review {
                get {
                    try {
                        return ((byte[])(this[this.tableTasks.reviewColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'review\' in table \'Tasks\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTasks.reviewColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long developer_id {
                get {
                    return ((long)(this[this.tableTasks.developer_idColumn]));
                }
                set {
                    this[this.tableTasks.developer_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long reviewer_id {
                get {
                    return ((long)(this[this.tableTasks.reviewer_idColumn]));
                }
                set {
                    this[this.tableTasks.reviewer_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long comments_count {
                get {
                    return ((long)(this[this.tableTasks.comments_countColumn]));
                }
                set {
                    this[this.tableTasks.comments_countColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long documents_count {
                get {
                    return ((long)(this[this.tableTasks.documents_countColumn]));
                }
                set {
                    this[this.tableTasks.documents_countColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.DateTime open_date {
                get {
                    return ((global::System.DateTime)(this[this.tableTasks.open_dateColumn]));
                }
                set {
                    this[this.tableTasks.open_dateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.DateTime analysis_date {
                get {
                    return ((global::System.DateTime)(this[this.tableTasks.analysis_dateColumn]));
                }
                set {
                    this[this.tableTasks.analysis_dateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.DateTime review_date {
                get {
                    return ((global::System.DateTime)(this[this.tableTasks.review_dateColumn]));
                }
                set {
                    this[this.tableTasks.review_dateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.DateTime correction_date {
                get {
                    return ((global::System.DateTime)(this[this.tableTasks.correction_dateColumn]));
                }
                set {
                    this[this.tableTasks.correction_dateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.DateTime promotion_date {
                get {
                    return ((global::System.DateTime)(this[this.tableTasks.promotion_dateColumn]));
                }
                set {
                    this[this.tableTasks.promotion_dateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.DateTime collection_date {
                get {
                    return ((global::System.DateTime)(this[this.tableTasks.collection_dateColumn]));
                }
                set {
                    this[this.tableTasks.collection_dateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.DateTime closed_date {
                get {
                    return ((global::System.DateTime)(this[this.tableTasks.closed_dateColumn]));
                }
                set {
                    this[this.tableTasks.closed_dateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.DateTime target_date {
                get {
                    return ((global::System.DateTime)(this[this.tableTasks.target_dateColumn]));
                }
                set {
                    this[this.tableTasks.target_dateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.DateTime created_at {
                get {
                    return ((global::System.DateTime)(this[this.tableTasks.created_atColumn]));
                }
                set {
                    this[this.tableTasks.created_atColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.DateTime updated_at {
                get {
                    return ((global::System.DateTime)(this[this.tableTasks.updated_atColumn]));
                }
                set {
                    this[this.tableTasks.updated_atColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PeopleRow PeopleRowByFK_Tasks_0_0 {
                get {
                    return ((PeopleRow)(this.GetParentRow(this.Table.ParentRelations["FK_Tasks_0_0"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Tasks_0_0"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PeopleRow PeopleRowByFK_Tasks_0_1 {
                get {
                    return ((PeopleRow)(this.GetParentRow(this.Table.ParentRelations["FK_Tasks_0_1"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Tasks_0_1"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsdescriptionNull() {
                return this.IsNull(this.tableTasks.descriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetdescriptionNull() {
                this[this.tableTasks.descriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsanalysisNull() {
                return this.IsNull(this.tableTasks.analysisColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetanalysisNull() {
                this[this.tableTasks.analysisColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsreviewNull() {
                return this.IsNull(this.tableTasks.reviewColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetreviewNull() {
                this[this.tableTasks.reviewColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class PeopleRowChangeEvent : global::System.EventArgs {
            
            private PeopleRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PeopleRowChangeEvent(PeopleRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PeopleRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class TasksRowChangeEvent : global::System.EventArgs {
            
            private TasksRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public TasksRowChangeEvent(TasksRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public TasksRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace Grind.Common.GrindDataSetTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class PeopleTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SQLite.SQLiteDataAdapter _adapter;
        
        private global::System.Data.SQLite.SQLiteConnection _connection;
        
        private global::System.Data.SQLite.SQLiteTransaction _transaction;
        
        private global::System.Data.SQLite.SQLiteCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public PeopleTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.SQLite.SQLiteDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SQLite.SQLiteConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SQLite.SQLiteTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.SQLite.SQLiteCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SQLite.SQLiteDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "People";
            tableMapping.ColumnMappings.Add("id", "id");
            tableMapping.ColumnMappings.Add("name", "name");
            tableMapping.ColumnMappings.Add("trigram", "trigram");
            tableMapping.ColumnMappings.Add("active", "active");
            tableMapping.ColumnMappings.Add("level", "level");
            tableMapping.ColumnMappings.Add("internal_object_id", "internal_object_id");
            tableMapping.ColumnMappings.Add("unread_objects_count", "unread_objects_count");
            tableMapping.ColumnMappings.Add("documents_count", "documents_count");
            tableMapping.ColumnMappings.Add("tasks_count", "tasks_count");
            tableMapping.ColumnMappings.Add("created_at", "created_at");
            tableMapping.ColumnMappings.Add("updated_at", "updated_at");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [main].[sqlite_default_schema].[People] WHERE (([id] = @Original_id) AND ([name] = @Original_name) AND ([trigram] = @Original_trigram) AND ([active] = @Original_active) AND ([level] = @Original_level) AND ([internal_object_id] = @Original_internal_object_id) AND ([unread_objects_count] = @Original_unread_objects_count) AND ([documents_count] = @Original_documents_count) AND ([tasks_count] = @Original_tasks_count) AND ([created_at] = @Original_created_at) AND ([updated_at] = @Original_updated_at))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::System.Data.SQLite.SQLiteParameter param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_id";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "id";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_name";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "name";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_trigram";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "trigram";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_active";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "active";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_level";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "level";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_internal_object_id";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "internal_object_id";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_unread_objects_count";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "unread_objects_count";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_documents_count";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "documents_count";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_tasks_count";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "tasks_count";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_created_at";
            param.DbType = global::System.Data.DbType.DateTime;
            param.DbType = global::System.Data.DbType.DateTime;
            param.SourceColumn = "created_at";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_updated_at";
            param.DbType = global::System.Data.DbType.DateTime;
            param.DbType = global::System.Data.DbType.DateTime;
            param.SourceColumn = "updated_at";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [main].[sqlite_default_schema].[People] ([id], [name], [trigram], [active], [level], [internal_object_id], [unread_objects_count], [documents_count], [tasks_count], [created_at], [updated_at]) VALUES (@id, @name, @trigram, @active, @level, @internal_object_id, @unread_objects_count, @documents_count, @tasks_count, @created_at, @updated_at)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@id";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "id";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@name";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "name";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@trigram";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "trigram";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@active";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "active";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@level";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "level";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@internal_object_id";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "internal_object_id";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@unread_objects_count";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "unread_objects_count";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@documents_count";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "documents_count";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@tasks_count";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "tasks_count";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@created_at";
            param.DbType = global::System.Data.DbType.DateTime;
            param.DbType = global::System.Data.DbType.DateTime;
            param.SourceColumn = "created_at";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@updated_at";
            param.DbType = global::System.Data.DbType.DateTime;
            param.DbType = global::System.Data.DbType.DateTime;
            param.SourceColumn = "updated_at";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [main].[sqlite_default_schema].[People] SET [id] = @id, [name] = @name, [trigram] = @trigram, [active] = @active, [level] = @level, [internal_object_id] = @internal_object_id, [unread_objects_count] = @unread_objects_count, [documents_count] = @documents_count, [tasks_count] = @tasks_count, [created_at] = @created_at, [updated_at] = @updated_at WHERE (([id] = @Original_id) AND ([name] = @Original_name) AND ([trigram] = @Original_trigram) AND ([active] = @Original_active) AND ([level] = @Original_level) AND ([internal_object_id] = @Original_internal_object_id) AND ([unread_objects_count] = @Original_unread_objects_count) AND ([documents_count] = @Original_documents_count) AND ([tasks_count] = @Original_tasks_count) AND ([created_at] = @Original_created_at) AND ([updated_at] = @Original_updated_at))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@id";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "id";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@name";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "name";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@trigram";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "trigram";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@active";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "active";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@level";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "level";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@internal_object_id";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "internal_object_id";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@unread_objects_count";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "unread_objects_count";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@documents_count";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "documents_count";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@tasks_count";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "tasks_count";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@created_at";
            param.DbType = global::System.Data.DbType.DateTime;
            param.DbType = global::System.Data.DbType.DateTime;
            param.SourceColumn = "created_at";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@updated_at";
            param.DbType = global::System.Data.DbType.DateTime;
            param.DbType = global::System.Data.DbType.DateTime;
            param.SourceColumn = "updated_at";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_id";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "id";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_name";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "name";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_trigram";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "trigram";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_active";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "active";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_level";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "level";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_internal_object_id";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "internal_object_id";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_unread_objects_count";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "unread_objects_count";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_documents_count";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "documents_count";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_tasks_count";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "tasks_count";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_created_at";
            param.DbType = global::System.Data.DbType.DateTime;
            param.DbType = global::System.Data.DbType.DateTime;
            param.SourceColumn = "created_at";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_updated_at";
            param.DbType = global::System.Data.DbType.DateTime;
            param.DbType = global::System.Data.DbType.DateTime;
            param.SourceColumn = "updated_at";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SQLite.SQLiteConnection();
            this._connection.ConnectionString = global::Grind.Common.Properties.Settings.Default.GrindConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SQLite.SQLiteCommand[1];
            this._commandCollection[0] = new global::System.Data.SQLite.SQLiteCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT [id], [name], [trigram], [active], [level], [internal_object_id], [unread_" +
                "objects_count], [documents_count], [tasks_count], [created_at], [updated_at] FRO" +
                "M [People]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(GrindDataSet.PeopleDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual GrindDataSet.PeopleDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            GrindDataSet.PeopleDataTable dataTable = new GrindDataSet.PeopleDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GrindDataSet.PeopleDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GrindDataSet dataSet) {
            return this.Adapter.Update(dataSet, "People");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(long Original_id, string Original_name, string Original_trigram, bool Original_active, long Original_level, string Original_internal_object_id, long Original_unread_objects_count, long Original_documents_count, long Original_tasks_count, System.DateTime Original_created_at, System.DateTime Original_updated_at) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((long)(Original_id));
            if ((Original_name == null)) {
                throw new global::System.ArgumentNullException("Original_name");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_name));
            }
            if ((Original_trigram == null)) {
                throw new global::System.ArgumentNullException("Original_trigram");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_trigram));
            }
            this.Adapter.DeleteCommand.Parameters[3].Value = ((bool)(Original_active));
            this.Adapter.DeleteCommand.Parameters[4].Value = ((long)(Original_level));
            if ((Original_internal_object_id == null)) {
                throw new global::System.ArgumentNullException("Original_internal_object_id");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_internal_object_id));
            }
            this.Adapter.DeleteCommand.Parameters[6].Value = ((long)(Original_unread_objects_count));
            this.Adapter.DeleteCommand.Parameters[7].Value = ((long)(Original_documents_count));
            this.Adapter.DeleteCommand.Parameters[8].Value = ((long)(Original_tasks_count));
            this.Adapter.DeleteCommand.Parameters[9].Value = ((System.DateTime)(Original_created_at));
            this.Adapter.DeleteCommand.Parameters[10].Value = ((System.DateTime)(Original_updated_at));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(long id, string name, string trigram, bool active, long level, string internal_object_id, long unread_objects_count, long documents_count, long tasks_count, System.DateTime created_at, System.DateTime updated_at) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((long)(id));
            if ((name == null)) {
                throw new global::System.ArgumentNullException("name");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(name));
            }
            if ((trigram == null)) {
                throw new global::System.ArgumentNullException("trigram");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(trigram));
            }
            this.Adapter.InsertCommand.Parameters[3].Value = ((bool)(active));
            this.Adapter.InsertCommand.Parameters[4].Value = ((long)(level));
            if ((internal_object_id == null)) {
                throw new global::System.ArgumentNullException("internal_object_id");
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(internal_object_id));
            }
            this.Adapter.InsertCommand.Parameters[6].Value = ((long)(unread_objects_count));
            this.Adapter.InsertCommand.Parameters[7].Value = ((long)(documents_count));
            this.Adapter.InsertCommand.Parameters[8].Value = ((long)(tasks_count));
            this.Adapter.InsertCommand.Parameters[9].Value = ((System.DateTime)(created_at));
            this.Adapter.InsertCommand.Parameters[10].Value = ((System.DateTime)(updated_at));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    long id, 
                    string name, 
                    string trigram, 
                    bool active, 
                    long level, 
                    string internal_object_id, 
                    long unread_objects_count, 
                    long documents_count, 
                    long tasks_count, 
                    System.DateTime created_at, 
                    System.DateTime updated_at, 
                    long Original_id, 
                    string Original_name, 
                    string Original_trigram, 
                    bool Original_active, 
                    long Original_level, 
                    string Original_internal_object_id, 
                    long Original_unread_objects_count, 
                    long Original_documents_count, 
                    long Original_tasks_count, 
                    System.DateTime Original_created_at, 
                    System.DateTime Original_updated_at) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((long)(id));
            if ((name == null)) {
                throw new global::System.ArgumentNullException("name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(name));
            }
            if ((trigram == null)) {
                throw new global::System.ArgumentNullException("trigram");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(trigram));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((bool)(active));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((long)(level));
            if ((internal_object_id == null)) {
                throw new global::System.ArgumentNullException("internal_object_id");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(internal_object_id));
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((long)(unread_objects_count));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((long)(documents_count));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((long)(tasks_count));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((System.DateTime)(created_at));
            this.Adapter.UpdateCommand.Parameters[10].Value = ((System.DateTime)(updated_at));
            this.Adapter.UpdateCommand.Parameters[11].Value = ((long)(Original_id));
            if ((Original_name == null)) {
                throw new global::System.ArgumentNullException("Original_name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(Original_name));
            }
            if ((Original_trigram == null)) {
                throw new global::System.ArgumentNullException("Original_trigram");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Original_trigram));
            }
            this.Adapter.UpdateCommand.Parameters[14].Value = ((bool)(Original_active));
            this.Adapter.UpdateCommand.Parameters[15].Value = ((long)(Original_level));
            if ((Original_internal_object_id == null)) {
                throw new global::System.ArgumentNullException("Original_internal_object_id");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(Original_internal_object_id));
            }
            this.Adapter.UpdateCommand.Parameters[17].Value = ((long)(Original_unread_objects_count));
            this.Adapter.UpdateCommand.Parameters[18].Value = ((long)(Original_documents_count));
            this.Adapter.UpdateCommand.Parameters[19].Value = ((long)(Original_tasks_count));
            this.Adapter.UpdateCommand.Parameters[20].Value = ((System.DateTime)(Original_created_at));
            this.Adapter.UpdateCommand.Parameters[21].Value = ((System.DateTime)(Original_updated_at));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string name, 
                    string trigram, 
                    bool active, 
                    long level, 
                    string internal_object_id, 
                    long unread_objects_count, 
                    long documents_count, 
                    long tasks_count, 
                    System.DateTime created_at, 
                    System.DateTime updated_at, 
                    long Original_id, 
                    string Original_name, 
                    string Original_trigram, 
                    bool Original_active, 
                    long Original_level, 
                    string Original_internal_object_id, 
                    long Original_unread_objects_count, 
                    long Original_documents_count, 
                    long Original_tasks_count, 
                    System.DateTime Original_created_at, 
                    System.DateTime Original_updated_at) {
            return this.Update(Original_id, name, trigram, active, level, internal_object_id, unread_objects_count, documents_count, tasks_count, created_at, updated_at, Original_id, Original_name, Original_trigram, Original_active, Original_level, Original_internal_object_id, Original_unread_objects_count, Original_documents_count, Original_tasks_count, Original_created_at, Original_updated_at);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class TasksTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SQLite.SQLiteDataAdapter _adapter;
        
        private global::System.Data.SQLite.SQLiteConnection _connection;
        
        private global::System.Data.SQLite.SQLiteTransaction _transaction;
        
        private global::System.Data.SQLite.SQLiteCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public TasksTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.SQLite.SQLiteDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SQLite.SQLiteConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SQLite.SQLiteTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.SQLite.SQLiteCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SQLite.SQLiteDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Tasks";
            tableMapping.ColumnMappings.Add("id", "id");
            tableMapping.ColumnMappings.Add("name", "name");
            tableMapping.ColumnMappings.Add("task_status", "task_status");
            tableMapping.ColumnMappings.Add("bug_type", "bug_type");
            tableMapping.ColumnMappings.Add("title", "title");
            tableMapping.ColumnMappings.Add("is_bug", "is_bug");
            tableMapping.ColumnMappings.Add("internal_object_id", "internal_object_id");
            tableMapping.ColumnMappings.Add("approved", "approved");
            tableMapping.ColumnMappings.Add("description", "description");
            tableMapping.ColumnMappings.Add("analysis", "analysis");
            tableMapping.ColumnMappings.Add("review", "review");
            tableMapping.ColumnMappings.Add("developer_id", "developer_id");
            tableMapping.ColumnMappings.Add("reviewer_id", "reviewer_id");
            tableMapping.ColumnMappings.Add("comments_count", "comments_count");
            tableMapping.ColumnMappings.Add("documents_count", "documents_count");
            tableMapping.ColumnMappings.Add("open_date", "open_date");
            tableMapping.ColumnMappings.Add("analysis_date", "analysis_date");
            tableMapping.ColumnMappings.Add("review_date", "review_date");
            tableMapping.ColumnMappings.Add("correction_date", "correction_date");
            tableMapping.ColumnMappings.Add("promotion_date", "promotion_date");
            tableMapping.ColumnMappings.Add("collection_date", "collection_date");
            tableMapping.ColumnMappings.Add("closed_date", "closed_date");
            tableMapping.ColumnMappings.Add("target_date", "target_date");
            tableMapping.ColumnMappings.Add("created_at", "created_at");
            tableMapping.ColumnMappings.Add("updated_at", "updated_at");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [main].[sqlite_default_schema].[Tasks] WHERE (([id] = @Original_id) AND ([name] = @Original_name) AND ([task_status] = @Original_task_status) AND ([bug_type] = @Original_bug_type) AND ([title] = @Original_title) AND ([is_bug] = @Original_is_bug) AND ([internal_object_id] = @Original_internal_object_id) AND ([approved] = @Original_approved) AND ((@IsNull_description = 1 AND [description] IS NULL) OR ([description] = @Original_description)) AND ((@IsNull_analysis = 1 AND [analysis] IS NULL) OR ([analysis] = @Original_analysis)) AND ((@IsNull_review = 1 AND [review] IS NULL) OR ([review] = @Original_review)) AND ([developer_id] = @Original_developer_id) AND ([reviewer_id] = @Original_reviewer_id) AND ([comments_count] = @Original_comments_count) AND ([documents_count] = @Original_documents_count) AND ([open_date] = @Original_open_date) AND ([analysis_date] = @Original_analysis_date) AND ([review_date] = @Original_review_date) AND ([correction_date] = @Original_correction_date) AND ([promotion_date] = @Original_promotion_date) AND ([collection_date] = @Original_collection_date) AND ([closed_date] = @Original_closed_date) AND ([target_date] = @Original_target_date) AND ([created_at] = @Original_created_at) AND ([updated_at] = @Original_updated_at))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::System.Data.SQLite.SQLiteParameter param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_id";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "id";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_name";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "name";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_task_status";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "task_status";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_bug_type";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "bug_type";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_title";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "title";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_is_bug";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "is_bug";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_internal_object_id";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "internal_object_id";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_approved";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "approved";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_description";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "description";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_description";
            param.DbType = global::System.Data.DbType.Binary;
            param.DbType = global::System.Data.DbType.Binary;
            param.SourceColumn = "description";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_analysis";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "analysis";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_analysis";
            param.DbType = global::System.Data.DbType.Binary;
            param.DbType = global::System.Data.DbType.Binary;
            param.SourceColumn = "analysis";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_review";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "review";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_review";
            param.DbType = global::System.Data.DbType.Binary;
            param.DbType = global::System.Data.DbType.Binary;
            param.SourceColumn = "review";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_developer_id";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "developer_id";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_reviewer_id";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "reviewer_id";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_comments_count";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "comments_count";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_documents_count";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "documents_count";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_open_date";
            param.DbType = global::System.Data.DbType.DateTime;
            param.DbType = global::System.Data.DbType.DateTime;
            param.SourceColumn = "open_date";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_analysis_date";
            param.DbType = global::System.Data.DbType.DateTime;
            param.DbType = global::System.Data.DbType.DateTime;
            param.SourceColumn = "analysis_date";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_review_date";
            param.DbType = global::System.Data.DbType.DateTime;
            param.DbType = global::System.Data.DbType.DateTime;
            param.SourceColumn = "review_date";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_correction_date";
            param.DbType = global::System.Data.DbType.DateTime;
            param.DbType = global::System.Data.DbType.DateTime;
            param.SourceColumn = "correction_date";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_promotion_date";
            param.DbType = global::System.Data.DbType.DateTime;
            param.DbType = global::System.Data.DbType.DateTime;
            param.SourceColumn = "promotion_date";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_collection_date";
            param.DbType = global::System.Data.DbType.DateTime;
            param.DbType = global::System.Data.DbType.DateTime;
            param.SourceColumn = "collection_date";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_closed_date";
            param.DbType = global::System.Data.DbType.DateTime;
            param.DbType = global::System.Data.DbType.DateTime;
            param.SourceColumn = "closed_date";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_target_date";
            param.DbType = global::System.Data.DbType.DateTime;
            param.DbType = global::System.Data.DbType.DateTime;
            param.SourceColumn = "target_date";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_created_at";
            param.DbType = global::System.Data.DbType.DateTime;
            param.DbType = global::System.Data.DbType.DateTime;
            param.SourceColumn = "created_at";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_updated_at";
            param.DbType = global::System.Data.DbType.DateTime;
            param.DbType = global::System.Data.DbType.DateTime;
            param.SourceColumn = "updated_at";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [main].[sqlite_default_schema].[Tasks] ([id], [name], [task_status], [bug_type], [title], [is_bug], [internal_object_id], [approved], [description], [analysis], [review], [developer_id], [reviewer_id], [comments_count], [documents_count], [open_date], [analysis_date], [review_date], [correction_date], [promotion_date], [collection_date], [closed_date], [target_date], [created_at], [updated_at]) VALUES (@id, @name, @task_status, @bug_type, @title, @is_bug, @internal_object_id, @approved, @description, @analysis, @review, @developer_id, @reviewer_id, @comments_count, @documents_count, @open_date, @analysis_date, @review_date, @correction_date, @promotion_date, @collection_date, @closed_date, @target_date, @created_at, @updated_at)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@id";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "id";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@name";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "name";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@task_status";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "task_status";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@bug_type";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "bug_type";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@title";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "title";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@is_bug";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "is_bug";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@internal_object_id";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "internal_object_id";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@approved";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "approved";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@description";
            param.DbType = global::System.Data.DbType.Binary;
            param.DbType = global::System.Data.DbType.Binary;
            param.SourceColumn = "description";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@analysis";
            param.DbType = global::System.Data.DbType.Binary;
            param.DbType = global::System.Data.DbType.Binary;
            param.SourceColumn = "analysis";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@review";
            param.DbType = global::System.Data.DbType.Binary;
            param.DbType = global::System.Data.DbType.Binary;
            param.SourceColumn = "review";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@developer_id";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "developer_id";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@reviewer_id";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "reviewer_id";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@comments_count";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "comments_count";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@documents_count";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "documents_count";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@open_date";
            param.DbType = global::System.Data.DbType.DateTime;
            param.DbType = global::System.Data.DbType.DateTime;
            param.SourceColumn = "open_date";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@analysis_date";
            param.DbType = global::System.Data.DbType.DateTime;
            param.DbType = global::System.Data.DbType.DateTime;
            param.SourceColumn = "analysis_date";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@review_date";
            param.DbType = global::System.Data.DbType.DateTime;
            param.DbType = global::System.Data.DbType.DateTime;
            param.SourceColumn = "review_date";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@correction_date";
            param.DbType = global::System.Data.DbType.DateTime;
            param.DbType = global::System.Data.DbType.DateTime;
            param.SourceColumn = "correction_date";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@promotion_date";
            param.DbType = global::System.Data.DbType.DateTime;
            param.DbType = global::System.Data.DbType.DateTime;
            param.SourceColumn = "promotion_date";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@collection_date";
            param.DbType = global::System.Data.DbType.DateTime;
            param.DbType = global::System.Data.DbType.DateTime;
            param.SourceColumn = "collection_date";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@closed_date";
            param.DbType = global::System.Data.DbType.DateTime;
            param.DbType = global::System.Data.DbType.DateTime;
            param.SourceColumn = "closed_date";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@target_date";
            param.DbType = global::System.Data.DbType.DateTime;
            param.DbType = global::System.Data.DbType.DateTime;
            param.SourceColumn = "target_date";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@created_at";
            param.DbType = global::System.Data.DbType.DateTime;
            param.DbType = global::System.Data.DbType.DateTime;
            param.SourceColumn = "created_at";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@updated_at";
            param.DbType = global::System.Data.DbType.DateTime;
            param.DbType = global::System.Data.DbType.DateTime;
            param.SourceColumn = "updated_at";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [main].[sqlite_default_schema].[Tasks] SET [id] = @id, [name] = @name, [ta" +
                "sk_status] = @task_status, [bug_type] = @bug_type, [title] = @title, [is_bug] = " +
                "@is_bug, [internal_object_id] = @internal_object_id, [approved] = @approved, [de" +
                "scription] = @description, [analysis] = @analysis, [review] = @review, [develope" +
                "r_id] = @developer_id, [reviewer_id] = @reviewer_id, [comments_count] = @comment" +
                "s_count, [documents_count] = @documents_count, [open_date] = @open_date, [analys" +
                "is_date] = @analysis_date, [review_date] = @review_date, [correction_date] = @co" +
                "rrection_date, [promotion_date] = @promotion_date, [collection_date] = @collecti" +
                "on_date, [closed_date] = @closed_date, [target_date] = @target_date, [created_at" +
                "] = @created_at, [updated_at] = @updated_at WHERE (([id] = @Original_id) AND ([n" +
                "ame] = @Original_name) AND ([task_status] = @Original_task_status) AND ([bug_typ" +
                "e] = @Original_bug_type) AND ([title] = @Original_title) AND ([is_bug] = @Origin" +
                "al_is_bug) AND ([internal_object_id] = @Original_internal_object_id) AND ([appro" +
                "ved] = @Original_approved) AND ((@IsNull_description = 1 AND [description] IS NU" +
                "LL) OR ([description] = @Original_description)) AND ((@IsNull_analysis = 1 AND [" +
                "analysis] IS NULL) OR ([analysis] = @Original_analysis)) AND ((@IsNull_review = " +
                "1 AND [review] IS NULL) OR ([review] = @Original_review)) AND ([developer_id] = " +
                "@Original_developer_id) AND ([reviewer_id] = @Original_reviewer_id) AND ([commen" +
                "ts_count] = @Original_comments_count) AND ([documents_count] = @Original_documen" +
                "ts_count) AND ([open_date] = @Original_open_date) AND ([analysis_date] = @Origin" +
                "al_analysis_date) AND ([review_date] = @Original_review_date) AND ([correction_d" +
                "ate] = @Original_correction_date) AND ([promotion_date] = @Original_promotion_da" +
                "te) AND ([collection_date] = @Original_collection_date) AND ([closed_date] = @Or" +
                "iginal_closed_date) AND ([target_date] = @Original_target_date) AND ([created_at" +
                "] = @Original_created_at) AND ([updated_at] = @Original_updated_at))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@id";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "id";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@name";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "name";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@task_status";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "task_status";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@bug_type";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "bug_type";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@title";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "title";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@is_bug";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "is_bug";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@internal_object_id";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "internal_object_id";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@approved";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "approved";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@description";
            param.DbType = global::System.Data.DbType.Binary;
            param.DbType = global::System.Data.DbType.Binary;
            param.SourceColumn = "description";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@analysis";
            param.DbType = global::System.Data.DbType.Binary;
            param.DbType = global::System.Data.DbType.Binary;
            param.SourceColumn = "analysis";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@review";
            param.DbType = global::System.Data.DbType.Binary;
            param.DbType = global::System.Data.DbType.Binary;
            param.SourceColumn = "review";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@developer_id";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "developer_id";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@reviewer_id";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "reviewer_id";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@comments_count";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "comments_count";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@documents_count";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "documents_count";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@open_date";
            param.DbType = global::System.Data.DbType.DateTime;
            param.DbType = global::System.Data.DbType.DateTime;
            param.SourceColumn = "open_date";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@analysis_date";
            param.DbType = global::System.Data.DbType.DateTime;
            param.DbType = global::System.Data.DbType.DateTime;
            param.SourceColumn = "analysis_date";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@review_date";
            param.DbType = global::System.Data.DbType.DateTime;
            param.DbType = global::System.Data.DbType.DateTime;
            param.SourceColumn = "review_date";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@correction_date";
            param.DbType = global::System.Data.DbType.DateTime;
            param.DbType = global::System.Data.DbType.DateTime;
            param.SourceColumn = "correction_date";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@promotion_date";
            param.DbType = global::System.Data.DbType.DateTime;
            param.DbType = global::System.Data.DbType.DateTime;
            param.SourceColumn = "promotion_date";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@collection_date";
            param.DbType = global::System.Data.DbType.DateTime;
            param.DbType = global::System.Data.DbType.DateTime;
            param.SourceColumn = "collection_date";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@closed_date";
            param.DbType = global::System.Data.DbType.DateTime;
            param.DbType = global::System.Data.DbType.DateTime;
            param.SourceColumn = "closed_date";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@target_date";
            param.DbType = global::System.Data.DbType.DateTime;
            param.DbType = global::System.Data.DbType.DateTime;
            param.SourceColumn = "target_date";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@created_at";
            param.DbType = global::System.Data.DbType.DateTime;
            param.DbType = global::System.Data.DbType.DateTime;
            param.SourceColumn = "created_at";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@updated_at";
            param.DbType = global::System.Data.DbType.DateTime;
            param.DbType = global::System.Data.DbType.DateTime;
            param.SourceColumn = "updated_at";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_id";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "id";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_name";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "name";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_task_status";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "task_status";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_bug_type";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "bug_type";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_title";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "title";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_is_bug";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "is_bug";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_internal_object_id";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "internal_object_id";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_approved";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "approved";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_description";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "description";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_description";
            param.DbType = global::System.Data.DbType.Binary;
            param.DbType = global::System.Data.DbType.Binary;
            param.SourceColumn = "description";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_analysis";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "analysis";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_analysis";
            param.DbType = global::System.Data.DbType.Binary;
            param.DbType = global::System.Data.DbType.Binary;
            param.SourceColumn = "analysis";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_review";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "review";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_review";
            param.DbType = global::System.Data.DbType.Binary;
            param.DbType = global::System.Data.DbType.Binary;
            param.SourceColumn = "review";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_developer_id";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "developer_id";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_reviewer_id";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "reviewer_id";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_comments_count";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "comments_count";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_documents_count";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "documents_count";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_open_date";
            param.DbType = global::System.Data.DbType.DateTime;
            param.DbType = global::System.Data.DbType.DateTime;
            param.SourceColumn = "open_date";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_analysis_date";
            param.DbType = global::System.Data.DbType.DateTime;
            param.DbType = global::System.Data.DbType.DateTime;
            param.SourceColumn = "analysis_date";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_review_date";
            param.DbType = global::System.Data.DbType.DateTime;
            param.DbType = global::System.Data.DbType.DateTime;
            param.SourceColumn = "review_date";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_correction_date";
            param.DbType = global::System.Data.DbType.DateTime;
            param.DbType = global::System.Data.DbType.DateTime;
            param.SourceColumn = "correction_date";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_promotion_date";
            param.DbType = global::System.Data.DbType.DateTime;
            param.DbType = global::System.Data.DbType.DateTime;
            param.SourceColumn = "promotion_date";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_collection_date";
            param.DbType = global::System.Data.DbType.DateTime;
            param.DbType = global::System.Data.DbType.DateTime;
            param.SourceColumn = "collection_date";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_closed_date";
            param.DbType = global::System.Data.DbType.DateTime;
            param.DbType = global::System.Data.DbType.DateTime;
            param.SourceColumn = "closed_date";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_target_date";
            param.DbType = global::System.Data.DbType.DateTime;
            param.DbType = global::System.Data.DbType.DateTime;
            param.SourceColumn = "target_date";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_created_at";
            param.DbType = global::System.Data.DbType.DateTime;
            param.DbType = global::System.Data.DbType.DateTime;
            param.SourceColumn = "created_at";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_updated_at";
            param.DbType = global::System.Data.DbType.DateTime;
            param.DbType = global::System.Data.DbType.DateTime;
            param.SourceColumn = "updated_at";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SQLite.SQLiteConnection();
            this._connection.ConnectionString = global::Grind.Common.Properties.Settings.Default.GrindConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SQLite.SQLiteCommand[1];
            this._commandCollection[0] = new global::System.Data.SQLite.SQLiteCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT [id], [name], [task_status], [bug_type], [title], [is_bug], [internal_object_id], [approved], [description], [analysis], [review], [developer_id], [reviewer_id], [comments_count], [documents_count], [open_date], [analysis_date], [review_date], [correction_date], [promotion_date], [collection_date], [closed_date], [target_date], [created_at], [updated_at] FROM [Tasks]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(GrindDataSet.TasksDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual GrindDataSet.TasksDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            GrindDataSet.TasksDataTable dataTable = new GrindDataSet.TasksDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GrindDataSet.TasksDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GrindDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Tasks");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(
                    long Original_id, 
                    string Original_name, 
                    long Original_task_status, 
                    long Original_bug_type, 
                    string Original_title, 
                    bool Original_is_bug, 
                    string Original_internal_object_id, 
                    bool Original_approved, 
                    byte[] Original_description, 
                    byte[] Original_analysis, 
                    byte[] Original_review, 
                    long Original_developer_id, 
                    long Original_reviewer_id, 
                    long Original_comments_count, 
                    long Original_documents_count, 
                    System.DateTime Original_open_date, 
                    System.DateTime Original_analysis_date, 
                    System.DateTime Original_review_date, 
                    System.DateTime Original_correction_date, 
                    System.DateTime Original_promotion_date, 
                    System.DateTime Original_collection_date, 
                    System.DateTime Original_closed_date, 
                    System.DateTime Original_target_date, 
                    System.DateTime Original_created_at, 
                    System.DateTime Original_updated_at) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((long)(Original_id));
            if ((Original_name == null)) {
                throw new global::System.ArgumentNullException("Original_name");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_name));
            }
            this.Adapter.DeleteCommand.Parameters[2].Value = ((long)(Original_task_status));
            this.Adapter.DeleteCommand.Parameters[3].Value = ((long)(Original_bug_type));
            if ((Original_title == null)) {
                throw new global::System.ArgumentNullException("Original_title");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_title));
            }
            this.Adapter.DeleteCommand.Parameters[5].Value = ((bool)(Original_is_bug));
            if ((Original_internal_object_id == null)) {
                throw new global::System.ArgumentNullException("Original_internal_object_id");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_internal_object_id));
            }
            this.Adapter.DeleteCommand.Parameters[7].Value = ((bool)(Original_approved));
            if ((Original_description == null)) {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[9].Value = ((byte[])(Original_description));
            }
            if ((Original_analysis == null)) {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[11].Value = ((byte[])(Original_analysis));
            }
            if ((Original_review == null)) {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[13].Value = ((byte[])(Original_review));
            }
            this.Adapter.DeleteCommand.Parameters[14].Value = ((long)(Original_developer_id));
            this.Adapter.DeleteCommand.Parameters[15].Value = ((long)(Original_reviewer_id));
            this.Adapter.DeleteCommand.Parameters[16].Value = ((long)(Original_comments_count));
            this.Adapter.DeleteCommand.Parameters[17].Value = ((long)(Original_documents_count));
            this.Adapter.DeleteCommand.Parameters[18].Value = ((System.DateTime)(Original_open_date));
            this.Adapter.DeleteCommand.Parameters[19].Value = ((System.DateTime)(Original_analysis_date));
            this.Adapter.DeleteCommand.Parameters[20].Value = ((System.DateTime)(Original_review_date));
            this.Adapter.DeleteCommand.Parameters[21].Value = ((System.DateTime)(Original_correction_date));
            this.Adapter.DeleteCommand.Parameters[22].Value = ((System.DateTime)(Original_promotion_date));
            this.Adapter.DeleteCommand.Parameters[23].Value = ((System.DateTime)(Original_collection_date));
            this.Adapter.DeleteCommand.Parameters[24].Value = ((System.DateTime)(Original_closed_date));
            this.Adapter.DeleteCommand.Parameters[25].Value = ((System.DateTime)(Original_target_date));
            this.Adapter.DeleteCommand.Parameters[26].Value = ((System.DateTime)(Original_created_at));
            this.Adapter.DeleteCommand.Parameters[27].Value = ((System.DateTime)(Original_updated_at));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    long id, 
                    string name, 
                    long task_status, 
                    long bug_type, 
                    string title, 
                    bool is_bug, 
                    string internal_object_id, 
                    bool approved, 
                    byte[] description, 
                    byte[] analysis, 
                    byte[] review, 
                    long developer_id, 
                    long reviewer_id, 
                    long comments_count, 
                    long documents_count, 
                    System.DateTime open_date, 
                    System.DateTime analysis_date, 
                    System.DateTime review_date, 
                    System.DateTime correction_date, 
                    System.DateTime promotion_date, 
                    System.DateTime collection_date, 
                    System.DateTime closed_date, 
                    System.DateTime target_date, 
                    System.DateTime created_at, 
                    System.DateTime updated_at) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((long)(id));
            if ((name == null)) {
                throw new global::System.ArgumentNullException("name");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(name));
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((long)(task_status));
            this.Adapter.InsertCommand.Parameters[3].Value = ((long)(bug_type));
            if ((title == null)) {
                throw new global::System.ArgumentNullException("title");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(title));
            }
            this.Adapter.InsertCommand.Parameters[5].Value = ((bool)(is_bug));
            if ((internal_object_id == null)) {
                throw new global::System.ArgumentNullException("internal_object_id");
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(internal_object_id));
            }
            this.Adapter.InsertCommand.Parameters[7].Value = ((bool)(approved));
            if ((description == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((byte[])(description));
            }
            if ((analysis == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((byte[])(analysis));
            }
            if ((review == null)) {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((byte[])(review));
            }
            this.Adapter.InsertCommand.Parameters[11].Value = ((long)(developer_id));
            this.Adapter.InsertCommand.Parameters[12].Value = ((long)(reviewer_id));
            this.Adapter.InsertCommand.Parameters[13].Value = ((long)(comments_count));
            this.Adapter.InsertCommand.Parameters[14].Value = ((long)(documents_count));
            this.Adapter.InsertCommand.Parameters[15].Value = ((System.DateTime)(open_date));
            this.Adapter.InsertCommand.Parameters[16].Value = ((System.DateTime)(analysis_date));
            this.Adapter.InsertCommand.Parameters[17].Value = ((System.DateTime)(review_date));
            this.Adapter.InsertCommand.Parameters[18].Value = ((System.DateTime)(correction_date));
            this.Adapter.InsertCommand.Parameters[19].Value = ((System.DateTime)(promotion_date));
            this.Adapter.InsertCommand.Parameters[20].Value = ((System.DateTime)(collection_date));
            this.Adapter.InsertCommand.Parameters[21].Value = ((System.DateTime)(closed_date));
            this.Adapter.InsertCommand.Parameters[22].Value = ((System.DateTime)(target_date));
            this.Adapter.InsertCommand.Parameters[23].Value = ((System.DateTime)(created_at));
            this.Adapter.InsertCommand.Parameters[24].Value = ((System.DateTime)(updated_at));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    long id, 
                    string name, 
                    long task_status, 
                    long bug_type, 
                    string title, 
                    bool is_bug, 
                    string internal_object_id, 
                    bool approved, 
                    byte[] description, 
                    byte[] analysis, 
                    byte[] review, 
                    long developer_id, 
                    long reviewer_id, 
                    long comments_count, 
                    long documents_count, 
                    System.DateTime open_date, 
                    System.DateTime analysis_date, 
                    System.DateTime review_date, 
                    System.DateTime correction_date, 
                    System.DateTime promotion_date, 
                    System.DateTime collection_date, 
                    System.DateTime closed_date, 
                    System.DateTime target_date, 
                    System.DateTime created_at, 
                    System.DateTime updated_at, 
                    long Original_id, 
                    string Original_name, 
                    long Original_task_status, 
                    long Original_bug_type, 
                    string Original_title, 
                    bool Original_is_bug, 
                    string Original_internal_object_id, 
                    bool Original_approved, 
                    byte[] Original_description, 
                    byte[] Original_analysis, 
                    byte[] Original_review, 
                    long Original_developer_id, 
                    long Original_reviewer_id, 
                    long Original_comments_count, 
                    long Original_documents_count, 
                    System.DateTime Original_open_date, 
                    System.DateTime Original_analysis_date, 
                    System.DateTime Original_review_date, 
                    System.DateTime Original_correction_date, 
                    System.DateTime Original_promotion_date, 
                    System.DateTime Original_collection_date, 
                    System.DateTime Original_closed_date, 
                    System.DateTime Original_target_date, 
                    System.DateTime Original_created_at, 
                    System.DateTime Original_updated_at) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((long)(id));
            if ((name == null)) {
                throw new global::System.ArgumentNullException("name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(name));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((long)(task_status));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((long)(bug_type));
            if ((title == null)) {
                throw new global::System.ArgumentNullException("title");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(title));
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((bool)(is_bug));
            if ((internal_object_id == null)) {
                throw new global::System.ArgumentNullException("internal_object_id");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(internal_object_id));
            }
            this.Adapter.UpdateCommand.Parameters[7].Value = ((bool)(approved));
            if ((description == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((byte[])(description));
            }
            if ((analysis == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((byte[])(analysis));
            }
            if ((review == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((byte[])(review));
            }
            this.Adapter.UpdateCommand.Parameters[11].Value = ((long)(developer_id));
            this.Adapter.UpdateCommand.Parameters[12].Value = ((long)(reviewer_id));
            this.Adapter.UpdateCommand.Parameters[13].Value = ((long)(comments_count));
            this.Adapter.UpdateCommand.Parameters[14].Value = ((long)(documents_count));
            this.Adapter.UpdateCommand.Parameters[15].Value = ((System.DateTime)(open_date));
            this.Adapter.UpdateCommand.Parameters[16].Value = ((System.DateTime)(analysis_date));
            this.Adapter.UpdateCommand.Parameters[17].Value = ((System.DateTime)(review_date));
            this.Adapter.UpdateCommand.Parameters[18].Value = ((System.DateTime)(correction_date));
            this.Adapter.UpdateCommand.Parameters[19].Value = ((System.DateTime)(promotion_date));
            this.Adapter.UpdateCommand.Parameters[20].Value = ((System.DateTime)(collection_date));
            this.Adapter.UpdateCommand.Parameters[21].Value = ((System.DateTime)(closed_date));
            this.Adapter.UpdateCommand.Parameters[22].Value = ((System.DateTime)(target_date));
            this.Adapter.UpdateCommand.Parameters[23].Value = ((System.DateTime)(created_at));
            this.Adapter.UpdateCommand.Parameters[24].Value = ((System.DateTime)(updated_at));
            this.Adapter.UpdateCommand.Parameters[25].Value = ((long)(Original_id));
            if ((Original_name == null)) {
                throw new global::System.ArgumentNullException("Original_name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((string)(Original_name));
            }
            this.Adapter.UpdateCommand.Parameters[27].Value = ((long)(Original_task_status));
            this.Adapter.UpdateCommand.Parameters[28].Value = ((long)(Original_bug_type));
            if ((Original_title == null)) {
                throw new global::System.ArgumentNullException("Original_title");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((string)(Original_title));
            }
            this.Adapter.UpdateCommand.Parameters[30].Value = ((bool)(Original_is_bug));
            if ((Original_internal_object_id == null)) {
                throw new global::System.ArgumentNullException("Original_internal_object_id");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((string)(Original_internal_object_id));
            }
            this.Adapter.UpdateCommand.Parameters[32].Value = ((bool)(Original_approved));
            if ((Original_description == null)) {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[34].Value = ((byte[])(Original_description));
            }
            if ((Original_analysis == null)) {
                this.Adapter.UpdateCommand.Parameters[35].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[35].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[36].Value = ((byte[])(Original_analysis));
            }
            if ((Original_review == null)) {
                this.Adapter.UpdateCommand.Parameters[37].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[38].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[37].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[38].Value = ((byte[])(Original_review));
            }
            this.Adapter.UpdateCommand.Parameters[39].Value = ((long)(Original_developer_id));
            this.Adapter.UpdateCommand.Parameters[40].Value = ((long)(Original_reviewer_id));
            this.Adapter.UpdateCommand.Parameters[41].Value = ((long)(Original_comments_count));
            this.Adapter.UpdateCommand.Parameters[42].Value = ((long)(Original_documents_count));
            this.Adapter.UpdateCommand.Parameters[43].Value = ((System.DateTime)(Original_open_date));
            this.Adapter.UpdateCommand.Parameters[44].Value = ((System.DateTime)(Original_analysis_date));
            this.Adapter.UpdateCommand.Parameters[45].Value = ((System.DateTime)(Original_review_date));
            this.Adapter.UpdateCommand.Parameters[46].Value = ((System.DateTime)(Original_correction_date));
            this.Adapter.UpdateCommand.Parameters[47].Value = ((System.DateTime)(Original_promotion_date));
            this.Adapter.UpdateCommand.Parameters[48].Value = ((System.DateTime)(Original_collection_date));
            this.Adapter.UpdateCommand.Parameters[49].Value = ((System.DateTime)(Original_closed_date));
            this.Adapter.UpdateCommand.Parameters[50].Value = ((System.DateTime)(Original_target_date));
            this.Adapter.UpdateCommand.Parameters[51].Value = ((System.DateTime)(Original_created_at));
            this.Adapter.UpdateCommand.Parameters[52].Value = ((System.DateTime)(Original_updated_at));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string name, 
                    long task_status, 
                    long bug_type, 
                    string title, 
                    bool is_bug, 
                    string internal_object_id, 
                    bool approved, 
                    byte[] description, 
                    byte[] analysis, 
                    byte[] review, 
                    long developer_id, 
                    long reviewer_id, 
                    long comments_count, 
                    long documents_count, 
                    System.DateTime open_date, 
                    System.DateTime analysis_date, 
                    System.DateTime review_date, 
                    System.DateTime correction_date, 
                    System.DateTime promotion_date, 
                    System.DateTime collection_date, 
                    System.DateTime closed_date, 
                    System.DateTime target_date, 
                    System.DateTime created_at, 
                    System.DateTime updated_at, 
                    long Original_id, 
                    string Original_name, 
                    long Original_task_status, 
                    long Original_bug_type, 
                    string Original_title, 
                    bool Original_is_bug, 
                    string Original_internal_object_id, 
                    bool Original_approved, 
                    byte[] Original_description, 
                    byte[] Original_analysis, 
                    byte[] Original_review, 
                    long Original_developer_id, 
                    long Original_reviewer_id, 
                    long Original_comments_count, 
                    long Original_documents_count, 
                    System.DateTime Original_open_date, 
                    System.DateTime Original_analysis_date, 
                    System.DateTime Original_review_date, 
                    System.DateTime Original_correction_date, 
                    System.DateTime Original_promotion_date, 
                    System.DateTime Original_collection_date, 
                    System.DateTime Original_closed_date, 
                    System.DateTime Original_target_date, 
                    System.DateTime Original_created_at, 
                    System.DateTime Original_updated_at) {
            return this.Update(Original_id, name, task_status, bug_type, title, is_bug, internal_object_id, approved, description, analysis, review, developer_id, reviewer_id, comments_count, documents_count, open_date, analysis_date, review_date, correction_date, promotion_date, collection_date, closed_date, target_date, created_at, updated_at, Original_id, Original_name, Original_task_status, Original_bug_type, Original_title, Original_is_bug, Original_internal_object_id, Original_approved, Original_description, Original_analysis, Original_review, Original_developer_id, Original_reviewer_id, Original_comments_count, Original_documents_count, Original_open_date, Original_analysis_date, Original_review_date, Original_correction_date, Original_promotion_date, Original_collection_date, Original_closed_date, Original_target_date, Original_created_at, Original_updated_at);
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private PeopleTableAdapter _peopleTableAdapter;
        
        private TasksTableAdapter _tasksTableAdapter;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public PeopleTableAdapter PeopleTableAdapter {
            get {
                return this._peopleTableAdapter;
            }
            set {
                this._peopleTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public TasksTableAdapter TasksTableAdapter {
            get {
                return this._tasksTableAdapter;
            }
            set {
                this._tasksTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                if (((this._peopleTableAdapter != null) 
                            && (this._peopleTableAdapter.Connection != null))) {
                    return this._peopleTableAdapter.Connection;
                }
                if (((this._tasksTableAdapter != null) 
                            && (this._tasksTableAdapter.Connection != null))) {
                    return this._tasksTableAdapter.Connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                if ((this._peopleTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._tasksTableAdapter != null)) {
                    count = (count + 1);
                }
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private int UpdateUpdatedRows(GrindDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._peopleTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.People.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._peopleTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._tasksTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Tasks.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._tasksTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private int UpdateInsertedRows(GrindDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._peopleTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.People.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._peopleTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._tasksTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Tasks.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._tasksTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private int UpdateDeletedRows(GrindDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            if ((this._tasksTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Tasks.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._tasksTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._peopleTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.People.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._peopleTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public virtual int UpdateAll(GrindDataSet dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            if (((this._peopleTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._peopleTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._tasksTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._tasksTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" +
                        "ger TableAdapter property to a valid TableAdapter instance.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("The transaction cannot begin. The current data connection does not support transa" +
                        "ctions or the current state is not allowing the transaction to begin.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                if ((this._peopleTableAdapter != null)) {
                    revertConnections.Add(this._peopleTableAdapter, this._peopleTableAdapter.Connection);
                    this._peopleTableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(workConnection));
                    this._peopleTableAdapter.Transaction = ((global::System.Data.SQLite.SQLiteTransaction)(workTransaction));
                    if (this._peopleTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._peopleTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._peopleTableAdapter.Adapter);
                    }
                }
                if ((this._tasksTableAdapter != null)) {
                    revertConnections.Add(this._tasksTableAdapter, this._tasksTableAdapter.Connection);
                    this._tasksTableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(workConnection));
                    this._tasksTableAdapter.Transaction = ((global::System.Data.SQLite.SQLiteTransaction)(workTransaction));
                    if (this._tasksTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._tasksTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._tasksTableAdapter.Adapter);
                    }
                }
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((this._peopleTableAdapter != null)) {
                    this._peopleTableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(revertConnections[this._peopleTableAdapter]));
                    this._peopleTableAdapter.Transaction = null;
                }
                if ((this._tasksTableAdapter != null)) {
                    this._tasksTableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(revertConnections[this._tasksTableAdapter]));
                    this._tasksTableAdapter.Transaction = null;
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private global::System.Data.DataRow GetRoot(global::System.Data.DataRow row, out int distance) {
                global::System.Diagnostics.Debug.Assert((row != null));
                global::System.Data.DataRow root = row;
                distance = 0;

                global::System.Collections.Generic.IDictionary<global::System.Data.DataRow, global::System.Data.DataRow> traversedRows = new global::System.Collections.Generic.Dictionary<global::System.Data.DataRow, global::System.Data.DataRow>();
                traversedRows[row] = row;

                global::System.Data.DataRow parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((parent != null) 
                            && (traversedRows.ContainsKey(parent) == false)); 
                ) {
                    distance = (distance + 1);
                    root = parent;
                    traversedRows[parent] = parent;
                    parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }

                if ((distance == 0)) {
                    traversedRows.Clear();
                    traversedRows[row] = row;
                    parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    for (
                    ; ((parent != null) 
                                && (traversedRows.ContainsKey(parent) == false)); 
                    ) {
                        distance = (distance + 1);
                        root = parent;
                        traversedRows[parent] = parent;
                        parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }

                return root;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                int distance1 = 0;
                global::System.Data.DataRow root1 = this.GetRoot(row1, out distance1);

                int distance2 = 0;
                global::System.Data.DataRow root2 = this.GetRoot(row2, out distance2);

                if (object.ReferenceEquals(root1, root2)) {
                    return (this._childFirst * distance1.CompareTo(distance2));
                }
                else {
                    global::System.Diagnostics.Debug.Assert(((root1.Table != null) 
                                    && (root2.Table != null)));
                    if ((root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2))) {
                        return -1;
                    }
                    else {
                        return 1;
                    }
                }
            }
        }
    }
}

#pragma warning restore 1591